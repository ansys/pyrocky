name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION : '3.10'
  LIBRARY_NAME: 'ansys-rocky-core'
  DOCUMENTATION_CNAME: 'rocky.docs.pyansys.com'
  DOC_DEPLOYMENT_IMAGE_TAG: v24.1.0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      github.event.type != 'labeled'
    steps:
      - uses: actions/checkout@v4

      - name: "Update labels"
        uses: micnncim/action-label-syncer@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Label pull-request"
        uses: actions/labeler@v5.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'style:skip')
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: Build and Smoke tests
    runs-on: ${{ matrix.os }}
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: Build wheelhouse and perform smoke test
        uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}


  tests_setup:
    name: Tests Setup
    runs-on: [self-hosted, Windows, pyrocky]
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip')
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create Python venv
        run: |
          python -m venv .venv

      - name: Install packages for tests
        run: |
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          pip install .[tests]

  tests_run:
    name: Tests
    needs: tests_setup
    runs-on: [self-hosted, Windows, pyrocky]
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip') &&
      !contains(github.event.pull_request.labels.*.name, 'tests:skip')
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        ansys-version: [242, 251, 252]
    env:
      ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}

    steps:
      - name: "Run unit tests"
        env:
          ANSYS_VERSION: ${{ matrix.ansys-version }}
        run: |
          .\.venv\Scripts\Activate.ps1
          pytest tests

      - uses: codecov/codecov-action@v4
        name: 'Upload coverage to CodeCov'
        env:
          CODECOV_TOKEN:  ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml
          flags: ${{ matrix.ansys-version }}

  docs_build:
    name: Build Documentation
    runs-on: [self-hosted, Linux, pyrocky]
    if: |
      contains(github.event.pull_request.labels.*.name, 'docs') ||
      github.ref == 'refs/heads/main'
    env:
      ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Create Python venv
        run: |
          python -m venv .venv-docs

      - name: Install packages for documentation build
        run: |
          source .venv-docs/bin/activate
          pip install .[doc]

      - name: Build Source Documentation (HTML)
        run: |
          source .venv-docs/bin/activate
          make -C doc/ html --quiet

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path:  doc/_build/html
          retention-days: 7

      - name: Build Source Documentation (PDF)
        run: |
          source .venv-docs/bin/activate
          make -C doc/ pdf --quiet

      - name: Upload PDF documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdf
          path: doc/_build/latex/*.pdf
          retention-days: 7

  package:
    name: Package library
    needs: [tests_run, docs_build]
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'ci:skip')
    steps:
      - name: Build library source and wheel artifacts
        uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

# Uncomment when ready to release
  release:
    name: Release project
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.event.pull_request.labels.*.name, 'ci:skip')
    needs: [package, smoke-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Release to the public PyPI repository
        uses: ansys/actions/release-pypi-public@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: Release to GitHub
        uses: ansys/actions/release-github@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_docs_dev:
    name: "Deploy development documentation"
    # Deploy development only when merging or pushing to the 'main' branch
    if: |
      github.ref == 'refs/heads/main' &&
      !contains(github.event.pull_request.labels.*.name, 'ci:skip')
    runs-on: ubuntu-latest
    needs: docs_build
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  upload_docs_release:
    name: "Deploy stable documentation"
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref, 'dev') &&
      !contains(github.event.pull_request.labels.*.name, 'ci:skip')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
