from collections.abc import Sequence
from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.plugins.addins.model.addin_manager import AddinManager as AddinManager
from rocky30.plugins.addins.model.property_set import PropertyEntry as PropertyEntry, PropertySet as PropertySet
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addin_list import RAModulePropertyList as RAModulePropertyList
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addin_process import RAModuleOutput as RAModuleOutput
from typing import Union

class ModulePropertyIdentifier:
    name: str
    modules: set[str]
    all_captions: dict[str, str]
    def __init__(self, name, modules, all_captions) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class ElementWithAddins:
    def GetModuleProperties(self) -> Sequence[ModulePropertyIdentifier]: ...
    def GetModuleProperty(self, property_name: Union[str, ModulePropertyIdentifier], unit: Union[str, None] = ...) -> Union[float, bool, str, 'RAModulePropertyList']: ...
    def SetModuleProperty(self, property_name: Union[str, ModulePropertyIdentifier], value: Union[float, bool, str], unit: Union[str, None] = ...) -> None: ...
    def GetValidOptionsForModuleProperty(self, property_name): ...

class RAModule(ApiElementItem, ElementWithAddins):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self): ...
    def EnableModule(self) -> None: ...
    def DisableModule(self) -> None: ...
    def SetModuleEnabled(self, enabled) -> None: ...
    def IsModuleEnabled(self): ...
    def GetName(self): ...
    def SetName(self, name) -> None: ...
    def GetOutputObject(self) -> Union[RAModuleOutput, None]: ...

class RAModuleCollection(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type[AddinManager]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetModuleNames(self) -> list[str]: ...
    def GetEnabledModules(self) -> list[str]: ...
    def GetModule(self, module_name: str) -> RAModule: ...
