from collections.abc import Sequence
from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_airflow import RAAirFlow as RAAirFlow
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_cfd_parameters import RACFDParametersList as RACFDParametersList
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_grid_process_element import RAGridProcessElementItem as RAGridProcessElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_semi_resolved_coupling import RAFluentSemiResolvedCoupling as RAFluentSemiResolvedCoupling
from ansys.rocky.core._api_stubs.rocky30.plugins.api.rocky_api_deprecated_decorator import ApiDeprecated as ApiDeprecated
from rocky30.process.cfd.cfd_coupling import CFDCouplingMode as CFDCouplingMode
from typing import List, Optional, Union

class RACFDCoupling(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def SetupNoCoupling(self): ...
    def SetupAirFlow(self) -> Union[RAAirFlow, None]: ...
    def SetupOneWayLBM(self) -> Union[RAAirFlow, None]: ...
    def GetAirFlow(self) -> Union[RAAirFlow, None]: ...
    def GetOneWayLBM(self) -> Union[RAAirFlow, None]: ...
    def SetupFluentOneWaySteadyState(self, f2r_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupOneWayFluentSteadyState(self, f2r_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupOneWayFluent(self, f2r_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupFluentTwoWay(self, cas_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupTwoWayFluent(self, cas_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupFluentTwoWaySemiResolved(self, cas_filename: str) -> Optional['RACFDCouplingTypes']: ...
    def SetupOneWayConstant(self) -> Optional['RACFDCouplingTypes']: ...
    def SetupConstantOneWay(self) -> Optional['RACFDCouplingTypes']: ...
    def SetupCFDConstantOneWayCouplingProcess(self) -> Optional['RACFDCouplingTypes']: ...
    def GetCouplingMode(self) -> str: ...
    def GetCouplingProcess(self) -> Optional['RACFDCouplingTypes']: ...
    def SetCurrentCouplingPartId(self) -> None: ...

class RABaseCFDCoupling(RAGridProcessElementItem):
    def GetCFDParametersList(self) -> RACFDParametersList: ...
    def SetPartIdIfValid(self) -> None: ...
    def GetConvectiveHeatTransferLaw(self): ...
    def SetConvectiveHeatTransferLaw(self, value) -> None: ...
    def GetDragLaw(self): ...
    def SetDragLaw(self, value) -> None: ...
    def GetLiftLaw(self): ...
    def SetLiftLaw(self, value) -> None: ...
    def GetMorsiAndAlexanderK1(self): ...
    def SetMorsiAndAlexanderK1(self, value) -> None: ...
    def GetMorsiAndAlexanderK2(self): ...
    def SetMorsiAndAlexanderK2(self, value) -> None: ...
    def GetMorsiAndAlexanderK3(self): ...
    def SetMorsiAndAlexanderK3(self, value) -> None: ...
    def GetSyamlalObrienC1(self): ...
    def SetSyamlalObrienC1(self, value) -> None: ...
    def GetSyamlalObrienD1(self): ...
    def SetSyamlalObrienD1(self, value) -> None: ...
    def GetTorqueLaw(self): ...
    def SetTorqueLaw(self, value) -> None: ...
    def GetUseUserDefinedConstants(self): ...
    def SetUseUserDefinedConstants(self, value) -> None: ...
    def GetVirtualMassLaw(self): ...
    def SetVirtualMassLaw(self, value) -> None: ...

class RAConstantOneWayCoupling(RABaseCFDCoupling):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self): ...
    def GetDensity(self, unit: Optional[str] = ...) -> float: ...
    def SetDensity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSpecificHeat(self, unit: Optional[str] = ...) -> float: ...
    def SetSpecificHeat(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetStartTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStartTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTemperature(self, unit: Optional[str] = ...) -> float: ...
    def SetTemperature(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetThermalConductivity(self, unit: Optional[str] = ...) -> float: ...
    def SetThermalConductivity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTurbulentDissipationRate(self, unit: Optional[str] = ...) -> float: ...
    def SetTurbulentDissipationRate(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTurbulentKineticEnergy(self, unit: Optional[str] = ...) -> float: ...
    def SetTurbulentKineticEnergy(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetUseTurbulentDispersion(self) -> bool: ...
    def SetUseTurbulentDispersion(self, value: bool) -> None: ...
    def EnableTurbulentDispersion(self) -> None: ...
    def DisableTurbulentDispersion(self) -> None: ...
    def IsTurbulentDispersionEnabled(self) -> bool: ...
    def GetVelocity(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetVelocity(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetViscosity(self, unit: Optional[str] = ...) -> float: ...
    def SetViscosity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
RACFDCouplingTypes = Union[RAAirFlow, RABaseCFDCoupling, RAFluentSemiResolvedCoupling]
