# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from coilib50.element_function.semantic_association import (
    SemanticAssociation as SemanticAssociation,
)
from coilib50.subject import Subject as Subject

from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_mesh_coloring import (
    ColorType as ColorType,
)
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_mesh_coloring import (
    RAMeshColoring as RAMeshColoring,
)

class RAContactsDataMeshColoring:
    def __init__(self, id: str) -> None: ...
    def GetSubject(self) -> Subject: ...
    def SetVisible(self, value: bool) -> None: ...
    def GetVisible(self) -> bool: ...
    def GetValidColoringModes(self) -> list[str]: ...
    def GetAvailableGridFunctionsNames(self) -> set[str]: ...
    def GetAvailableGridFunctions(self) -> set[type["SemanticAssociation"]]: ...
    def SetStride(self, value: int) -> None: ...
    def GetStride(self) -> int: ...
    def SetContactsVisible(self, value: bool) -> None: ...
    def GetContactsVisible(self) -> bool: ...
    def SetContactsColor(self, values: ColorType) -> None: ...
    def GetContactsColor(self) -> ColorType: ...
    def SetContactsProperty(
        self, value: Union[type["SemanticAssociation"], str, None]
    ) -> None: ...
    def GetContactsProperty(self) -> Union[type["SemanticAssociation"], None]: ...
    def SetContactsPointSize(self, value: float) -> None: ...
    def GetContactsPointSize(self) -> float: ...
    def SetContactsNetworkVisible(self, value: bool) -> None: ...
    def GetContactsNetworkVisible(self) -> bool: ...
    def SetContactsNetworkColor(self, values: ColorType) -> None: ...
    def GetContactsNetworkColor(self) -> ColorType: ...
    def SetContactsNetworkProperty(
        self, value: Union[type["SemanticAssociation"], str, None]
    ) -> None: ...
    def GetContactsNetworkProperty(self) -> Union[type["SemanticAssociation"], None]: ...
    def SetContactsNetworkLineWidth(self, value: float) -> None: ...
    def GetContactsNetworkLineWidth(self) -> float: ...
