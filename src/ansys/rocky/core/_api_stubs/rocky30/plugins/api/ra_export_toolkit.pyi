from _typeshed import Incomplete
from coilib50.subject import Subject as Subject
from coilib50.time.time_step_interface import ITimeStep as ITimeStep
from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.particle.particle import Particle as Particle
from rocky30.models.particle.particle_tesselation import GetParticleSizeDistribution as GetParticleSizeDistribution
from rocky30.models.rocky_process_queries import QUERY_ROCKY_BOUNDARY_TRANSFORMER as QUERY_ROCKY_BOUNDARY_TRANSFORMER
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_base_geometry import RABaseGeometry as RABaseGeometry
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_study import RAStudy as RAStudy
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall import RAWall as RAWall
from rocky30.process.triangle_helper import GetTrianglesFromGeometry as GetTrianglesFromGeometry

ExportValuesTuple = tuple[float, ...]

class RAExportToolkit:
    ra_study: Incomplete
    def __init__(self, ra_study: RAStudy) -> None: ...
    def ExportFEMForces(self, csv_filename: str, entities_to_export: Union[ApiElementItem, str, list], timestep_to_export: Union[ITimeStep, str, int, None] = ..., apply_transformation: bool = ...) -> None: ...
    def ExportGeometryLoads(self, csv_filename: str, entities_to_export: Union[ApiElementItem, str, list], timestep_to_export: Union[ITimeStep, str, int, None] = ..., apply_transformation: bool = ..., export_forces: bool = ...) -> None: ...
    def ExportGeometryLoadsMultiTime(self, csv_filename: str, entities_to_export: Union[ApiElementItem, str, list], timesteps_to_export: list[Union[ITimeStep, int]], apply_transformation: bool = ..., export_forces: bool = ..., show_progress: bool = ...) -> None: ...
    def ExportParticleToStl(self, stl_filename: str, particle: Union[str, Particle, ApiElementItem], time_to_export: Union[ITimeStep, int, None] = ..., output_unit: Union[str, None] = ..., target_size: Union[float, None] = ..., target_unit: Union[str, None] = ...) -> None: ...
    def ExportToSTL(self, stl_filename: str, entities: Union[Subject, ApiElementItem, str, list], time_to_export: Union[ITimeStep, int, None] = ..., output_unit: Union[str, None] = ...) -> None: ...
    def ExportHTC(self, csv_filename: str, entities_to_export: Union[ApiElementItem, str, list], timestep_to_export: Union[ITimeStep, str, int, None], apply_transformation: bool, ref_temperature: Union[float, None]) -> None: ...
