from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.input.sph_inlet import SPHInlet as SPHInlet
from typing import List, Optional, Union

class RAFluidInlet(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type[SPHInlet]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetBoundaryCondition(self) -> str: ...
    def SetBoundaryCondition(self, value: str) -> None: ...
    def GetValidBoundaryConditionValues(self) -> List[str]: ...
    def GetMassFlowRate(self, unit: Optional[str] = ...) -> float: ...
    def SetMassFlowRate(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetStartTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStartTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetStopTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStopTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTemperature(self, unit: Optional[str] = ...) -> float: ...
    def SetTemperature(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetVelocity(self, unit: Optional[str] = ...) -> float: ...
    def SetVelocity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetEntryPoint(self): ...
    def SetEntryPoint(self, value) -> None: ...
    def GetAvailableEntryPoints(self): ...
