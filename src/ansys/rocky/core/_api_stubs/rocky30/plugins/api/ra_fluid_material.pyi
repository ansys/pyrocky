from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.material.fluid_material import FluidMaterial as FluidMaterial
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins import ElementWithAddins as ElementWithAddins
from ansys.rocky.core._api_stubs.rocky30.plugins.api.rocky_api_deprecated_decorator import ApiDeprecated as ApiDeprecated
from typing import Optional, Union

class RAFluidMaterial(ApiElementItem, ElementWithAddins):
    @classmethod
    def GetWrappedClass(self) -> type[FluidMaterial]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetSoundSpeed(self, unit: Union[str, None] = ...) -> None: ...
    def SetSoundSpeed(self, value: Union[str, float], unit: Union[str, None] = ...) -> None: ...
    def GetDensity(self, unit: Optional[str] = ...) -> float: ...
    def SetDensity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetSpecificHeat(self, unit: Optional[str] = ...) -> float: ...
    def SetSpecificHeat(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetThermalConductivity(self, unit: Optional[str] = ...) -> float: ...
    def SetThermalConductivity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetViscosity(self, unit: Optional[str] = ...) -> float: ...
    def SetViscosity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
