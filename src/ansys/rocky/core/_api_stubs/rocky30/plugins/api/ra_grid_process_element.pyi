from _typeshed import Incomplete
from barril.units import Scalar
from ben10.element_function.semantic_association import SemanticAssociation as SemanticAssociation
from ben10.element_function.semantic_association_crossed_curve import SemanticAssociationCrossedCurve as SemanticAssociationCrossedCurve
from kraken20.plugins.api.ka_grid import KAGrid
from ansys.rocky.core._api_stubs.rocky30.plugins.api._ra_subject_with_coloring_mixin import _RASubjectWithColoringMixin
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_custom_calculators import RACustomCurveAndGridProperty as RACustomCurveAndGridProperty
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_time_statistics import RATimeStatistics as RATimeStatistics
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall import RAWall as RAWall
from rocky30.plugins.curve_calculation.grid_function.pre_calculated_grid_function_calculators import Rocky30PreCalculatedGridFunctionCalculation as Rocky30PreCalculatedGridFunctionCalculation

class RAGridProcessElementItem(KAGrid, _RASubjectWithColoringMixin, RACustomCurveAndGridProperty):
    def GetGridFunction(self, grid_function_name, simulation_name: Incomplete | None = ..., translated: bool = ...): ...
    def GetGeometry(self, time_step: str = ...) -> RAWall: ...
    def GetTimeStatistics(self) -> RATimeStatistics: ...
    VALID_OPERATIONS: Incomplete
    VALID_TIME_RANGE_DEFINITIONS: Incomplete
    VALID_DOMAIN_RANGE: Incomplete
    def CreateTransientCurveOutputVariable(self, curve_name: str, operation: str = ..., time_operation: str = ..., time_range: str = ..., initial_time_range: float = ..., final_time_range: float = ..., domain_range: str = ..., initial_domain_range: float = ..., final_domain_range: float = ..., domain_unit: Union[str, None] = ...): ...
    def CreateCurveOutputVariable(self, curve_name: str, operation: str = ..., time_range: str = ..., initial_time_range: float = ..., final_time_range: float = ...): ...
    def CreateGridFunctionStatisticOutputVariable(self, grid_function_name: str, operation: str = ..., statistic_operation: str = ..., time_range: str = ..., initial_time_range: float = ..., final_time_range: float = ...) -> str: ...
    def GetOutputVariableValue(self, variable_name: str) -> Scalar: ...
    def RemoveOutputVariable(self, variable_name: str) -> None: ...
    def RemoveProcess(self) -> None: ...
