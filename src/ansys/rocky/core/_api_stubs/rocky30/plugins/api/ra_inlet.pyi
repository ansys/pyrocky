from collections.abc import Sequence
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_base_geometry import RABaseGeometry as RABaseGeometry
from ansys.rocky.core._api_stubs.rocky30.plugins.api.rocky_api_utils import ConvertUserPassedValueToScalar as ConvertUserPassedValueToScalar
from typing import List, Optional, Union

class RAInletGeometry(RABaseGeometry):
    @classmethod
    def GetWrappedClass(self): ...
    def SetGeometryType(self, geometry_type: str) -> None: ...
    def GetGeometryType(self) -> str: ...
    def GetRectangularSize(self, unit: Union[str, None] = ...) -> tuple[float, float]: ...
    def SetRectangularSize(self, length: float, width: float, unit: Union[str, None] = ...) -> None: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetCircularMinMaxRadius(self, unit: Union[str, None] = ...) -> tuple[float, float]: ...
    def SetCircularMinMaxRadius(self, min_radius: float, max_radius: float, unit: Union[str, None] = ...) -> None: ...
    def GetAlignmentAngle(self, unit: Optional[str] = ...) -> float: ...
    def SetAlignmentAngle(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetCenter(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetCenter(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetLength(self, unit: Optional[str] = ...) -> float: ...
    def SetLength(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetWidth(self, unit: Optional[str] = ...) -> float: ...
    def SetWidth(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetInclineAngle(self, unit: Optional[str] = ...) -> float: ...
    def SetInclineAngle(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
