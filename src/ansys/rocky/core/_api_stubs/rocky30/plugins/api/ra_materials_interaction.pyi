from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins import ElementWithAddins as ElementWithAddins
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_solid_material import RASolidMaterial as RASolidMaterial
from typing import Optional, Union

class RAMaterialsInteraction(ApiElementItem, ElementWithAddins):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetFirstMaterial(self) -> RASolidMaterial: ...
    def GetSecondMaterial(self) -> RASolidMaterial: ...
    def GetAdhesiveDistance(self, unit: Optional[str] = ...) -> float: ...
    def SetAdhesiveDistance(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetAdhesiveFraction(self, unit: Optional[str] = ...) -> float: ...
    def SetAdhesiveFraction(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetContactStiffnessMultiplier(self, unit: Optional[str] = ...) -> float: ...
    def SetContactStiffnessMultiplier(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetRestitutionCoefficient(self, unit: Optional[str] = ...) -> float: ...
    def SetRestitutionCoefficient(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetDynamicFriction(self, unit: Optional[str] = ...) -> float: ...
    def SetDynamicFriction(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetStaticFriction(self, unit: Optional[str] = ...) -> float: ...
    def SetStaticFriction(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSurfaceEnergy(self, unit: Optional[str] = ...) -> float: ...
    def SetSurfaceEnergy(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTangentialStiffnessRatio(self, unit: Optional[str] = ...) -> float: ...
    def SetTangentialStiffnessRatio(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetVelocityExponent(self, unit: Optional[str] = ...) -> float: ...
    def SetVelocityExponent(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetVelocityLimit(self, unit: Optional[str] = ...) -> float: ...
    def SetVelocityLimit(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
