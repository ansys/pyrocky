# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from typing import Union

from ben10.element_function.semantic_association import SemanticAssociation
from sci20.plugins.process.coloring_process import MeshAssemblyColoringProcessSubject

from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import (
    ApiElementItem,
)

ColorType = tuple[float, float, float]

class RAMeshColoring(ApiElementItem):
    @classmethod
    def GetWrappedClass(cls) -> type["MeshAssemblyColoringProcessSubject"]: ...
    @classmethod
    def GetClassName(cls) -> str: ...
    def SetVisible(self, value: bool) -> None: ...
    def GetVisible(self) -> bool: ...
    def SetLevelOfDetail(self, value: str) -> None: ...
    def GetValidLevelOfDetailValues(self) -> list[str]: ...
    def GetLevelOfDetail(self) -> str: ...
    def SetStride(self, value: int) -> None: ...
    def GetStride(self) -> int: ...
    def GetAvailableGridFunctions(self) -> set["SemanticAssociation"]: ...
    def GetAvailableGridFunctionsNames(self) -> set[str]: ...
    def GetAvailableVectorGridFunctions(self) -> set["SemanticAssociation"]: ...
    def GetAvailableVectorGridFunctionsNames(self) -> set[str]: ...
    def GetValidColoringModes(self) -> list[str]: ...
    def SetTransparencyEnabled(self, value: bool) -> None: ...
    def GetTransparencyEnabled(self) -> bool: ...
    def SetTransparency(self, value: float) -> None: ...
    def GetTransparency(self) -> float: ...
    def SetNodeVisible(self, value: bool) -> None: ...
    def GetNodeVisible(self) -> bool: ...
    def SetNodeColor(self, values: ColorType) -> None: ...
    def GetNodeColor(self) -> ColorType: ...
    def SetNodeGridFunction(
        self, value: Union["SemanticAssociation", str, None]
    ) -> None: ...
    def GetNodeGridFunction(self) -> Union["SemanticAssociation", None]: ...
    def SetNodePointSize(self, value: float) -> None: ...
    def GetNodePointSize(self) -> float: ...
    def SetEdgeVisible(self, value: bool) -> None: ...
    def GetEdgeVisible(self) -> bool: ...
    def SetEdgeColor(self, values: ColorType) -> None: ...
    def GetEdgeColor(self) -> ColorType: ...
    def SetEdgeGridFunction(
        self, value: Union["SemanticAssociation", str, None]
    ) -> None: ...
    def GetEdgeGridFunction(self) -> Union["SemanticAssociation", None]: ...
    def SetEdgeLineWidth(self, value: float) -> None: ...
    def GetEdgeLineWidth(self) -> float: ...
    def SetFaceVisible(self, value: bool) -> None: ...
    def GetFaceVisible(self) -> bool: ...
    def SetFaceColor(self, values: ColorType) -> None: ...
    def GetFaceColor(self) -> ColorType: ...
    def SetFaceGridFunction(
        self, value: Union["SemanticAssociation", str, None]
    ) -> None: ...
    def GetFaceGridFunction(self) -> Union["SemanticAssociation", None]: ...
    def GetValidFaceScopes(self) -> list[str]: ...
    def SetFaceScope(self, value: str) -> None: ...
    def GetFaceScope(self) -> str: ...
    def GetValidFaceStructuredPartitionsValues(self) -> list[str]: ...
    def SetFaceStructuredPartitions(self, value: str) -> None: ...
    def GetFaceStructuredPartitions(self) -> str: ...
    def GetValidFaceCustomStructuredPartitions(self) -> list[str]: ...
    def SetFaceCustomStructuredPartitions(self, values: list[str]) -> None: ...
    def GetFaceCustomStructuredPartitions(self) -> list[str]: ...
    def SetFaceShowOnNode(self, value: bool) -> None: ...
    def GetFaceShowOnNode(self) -> bool: ...
    def SetVectorVisible(self, value: bool) -> None: ...
    def GetVectorVisible(self) -> bool: ...
    def SetVectorGridFunction(
        self, value: Union["SemanticAssociation", str, None]
    ) -> None: ...
    def GetVectorGridFunction(self) -> Union["SemanticAssociation", None]: ...
    def SetVectorScale(self, value: float) -> None: ...
    def GetVectorScale(self) -> float: ...
    def SetNormalizedVectorsEnabled(self, value: bool) -> None: ...
    def GetNormalizedVectorsEnabled(self) -> bool: ...
