from collections.abc import Sequence
from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.particle.particle_assembly import ParticleAssemblyCustom as ParticleAssemblyCustom, ParticleAssemblyPart as ParticleAssemblyPart, ParticleAssemblyPartList as ParticleAssemblyPartList
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_list import RAList as RAList
from typing import List, Optional, Union

class RAParticleAssemblyPart(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type[ParticleAssemblyPart]: ...
    @classmethod
    def GetClassName(self): ...
    def GetAngle(self, unit: Optional[str] = ...) -> float: ...
    def SetAngle(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetPositionX(self, unit: Optional[str] = ...) -> float: ...
    def SetPositionX(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetPositionY(self, unit: Optional[str] = ...) -> float: ...
    def SetPositionY(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetPositionZ(self, unit: Optional[str] = ...) -> float: ...
    def SetPositionZ(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetRotationX(self, unit: Optional[str] = ...) -> float: ...
    def SetRotationX(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetRotationY(self, unit: Optional[str] = ...) -> float: ...
    def SetRotationY(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetRotationZ(self, unit: Optional[str] = ...) -> float: ...
    def SetRotationZ(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetScale(self, unit: Optional[str] = ...) -> float: ...
    def SetScale(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetParticle(self): ...
    def SetParticle(self, value) -> None: ...
    def GetAvailableParticles(self): ...

class RAParticleAssemblyPartList(RAList[RAParticleAssemblyPart]):
    @classmethod
    def GetWrappedClass(self) -> type[ParticleAssemblyPartList]: ...
    @classmethod
    def GetClassName(self) -> str: ...

class RAParticleAssemblyCustom(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type[ParticleAssemblyCustom]: ...
    @classmethod
    def GetClassName(self): ...
    def GetArea(self, unit: Optional[str] = ...) -> float: ...
    def SetArea(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetCenterOfMass(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetCenterOfMass(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetEnabled(self) -> bool: ...
    def SetEnabled(self, value: bool) -> None: ...
    def GetGeometricCenter(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetGeometricCenter(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetInertiaXAxis(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetInertiaXAxis(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetInertiaYAxis(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetInertiaYAxis(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetInertiaZAxis(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetInertiaZAxis(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetMass(self, unit: Optional[str] = ...) -> float: ...
    def SetMass(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetMomentOfInertia(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetMomentOfInertia(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetPorosity(self, unit: Optional[str] = ...) -> float: ...
    def SetPorosity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetVolume(self, unit: Optional[str] = ...) -> float: ...
    def SetVolume(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
