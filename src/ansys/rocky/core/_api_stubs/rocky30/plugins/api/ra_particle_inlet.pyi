from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_inlet_properties import RAParticleInletPropertiesList as RAParticleInletPropertiesList
from ansys.rocky.core._api_stubs.rocky30.plugins.api.rocky_api_deprecated_decorator import ApiDeprecated as ApiDeprecated
from typing import Optional, Union

class RAParticleInlet(ApiElementItem):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetTonnageList(self): ...
    def GetInputPropertiesList(self) -> RAParticleInletPropertiesList: ...
    def EnablePeriodicDischarge(self) -> None: ...
    def DisablePeriodicDischarge(self) -> None: ...
    def IsPeriodicDischargeEnabled(self) -> bool: ...
    def GetPeriodicDischarge(self) -> bool: ...
    def SetPeriodicDischarge(self, value): ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetInjectionDuration(self, unit: Optional[str] = ...) -> float: ...
    def SetInjectionDuration(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetDischargeTime(self, unit: Optional[str] = ...) -> float: ...
    def SetDischargeTime(self, value: float, unit: Optional[str] = ...) -> None: ...
    def GetForcePacking(self) -> bool: ...
    def SetForcePacking(self, value: bool) -> None: ...
    def EnableForcePacking(self) -> None: ...
    def DisableForcePacking(self) -> None: ...
    def IsForcePackingEnabled(self) -> bool: ...
    def GetPeriod(self, unit: Optional[str] = ...) -> float: ...
    def SetPeriod(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetPeriodic(self) -> bool: ...
    def SetPeriodic(self, value: bool) -> None: ...
    def EnablePeriodic(self) -> None: ...
    def DisablePeriodic(self) -> None: ...
    def IsPeriodicEnabled(self) -> bool: ...
    def GetStartTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStartTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetStopAllAtStopTime(self) -> bool: ...
    def SetStopAllAtStopTime(self, value: bool) -> None: ...
    def EnableStopAllAtStopTime(self) -> None: ...
    def DisableStopAllAtStopTime(self) -> None: ...
    def IsStopAllAtStopTimeEnabled(self) -> bool: ...
    def GetStopTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStopTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTargetNormalVelocity(self, unit: Optional[str] = ...) -> float: ...
    def SetTargetNormalVelocity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetUseTargetNormalVelocity(self) -> bool: ...
    def SetUseTargetNormalVelocity(self, value: bool) -> None: ...
    def EnableUseTargetNormalVelocity(self) -> None: ...
    def DisableUseTargetNormalVelocity(self) -> None: ...
    def IsUseTargetNormalVelocityEnabled(self) -> bool: ...
    def GetUxLocal(self, unit: Optional[str] = ...) -> float: ...
    def SetUxLocal(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetUzLocal(self, unit: Optional[str] = ...) -> float: ...
    def SetUzLocal(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSphInjectionEnabled(self) -> bool: ...
    def SetSphInjectionEnabled(self, value: bool) -> None: ...
    def GetSphTemperature(self, unit: Optional[str] = ...) -> float: ...
    def SetSphTemperature(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetEntryPoint(self): ...
    def SetEntryPoint(self, value) -> None: ...
    def GetAvailableEntryPoints(self): ...
