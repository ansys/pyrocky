from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.input.particle_inlet import ParticleInletProperties as ParticleInletProperties
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins import ElementWithAddins as ElementWithAddins
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_list import RAList as RAList
from typing import Optional, Union

class RAParticleInletProperties(ApiElementItem, ElementWithAddins):
    @classmethod
    def GetWrappedClass(self) -> type[ParticleInletProperties]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetMassFlowRate(self, unit: Optional[str] = ...) -> float: ...
    def SetMassFlowRate(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetTonnage(self, unit: Optional[str] = ...) -> float: ...
    def SetTonnage(self, value: float, unit: Optional[str] = ...) -> None: ...
    def GetTemperature(self, unit: Optional[str] = ...) -> float: ...
    def SetTemperature(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetParticle(self): ...
    def SetParticle(self, value) -> None: ...
    def GetAvailableParticles(self): ...

class RAParticleInletPropertiesList(RAList):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self) -> str: ...
