from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from typing import List, Optional, Union

class RAPhysics(ApiElementItem):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self) -> str: ...
    @property
    def enable_thermal_model(self): ...
    def GetAdhesionModel(self) -> str: ...
    def SetAdhesionModel(self, value: str) -> None: ...
    def GetValidAdhesionModelValues(self) -> List[str]: ...
    def GetClosePackingVolumeFraction(self) -> float: ...
    def SetClosePackingVolumeFraction(self, value: Union[str, float]) -> None: ...
    def GetEnableCoarseGrainModeling(self) -> bool: ...
    def SetEnableCoarseGrainModeling(self, value: bool) -> None: ...
    def GetEnableThermalModel(self) -> bool: ...
    def SetEnableThermalModel(self, value: bool) -> None: ...
    def GetGravityStartTime(self, unit: Optional[str] = ...) -> float: ...
    def SetGravityStartTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetGravityStopTime(self, unit: Optional[str] = ...) -> float: ...
    def SetGravityStopTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetGravityXDirection(self, unit: Optional[str] = ...) -> float: ...
    def SetGravityXDirection(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetGravityYDirection(self, unit: Optional[str] = ...) -> float: ...
    def SetGravityYDirection(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetGravityZDirection(self, unit: Optional[str] = ...) -> float: ...
    def SetGravityZDirection(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetImpactEnergyModel(self) -> str: ...
    def SetImpactEnergyModel(self, value: str) -> None: ...
    def GetValidImpactEnergyModelValues(self) -> List[str]: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetNormalForceModel(self) -> str: ...
    def SetNormalForceModel(self, value: str) -> None: ...
    def GetValidNormalForceModelValues(self) -> List[str]: ...
    def GetRollingResistanceModel(self) -> str: ...
    def SetRollingResistanceModel(self, value: str) -> None: ...
    def GetValidRollingResistanceModelValues(self) -> List[str]: ...
    def GetExponentLimit(self) -> float: ...
    def SetExponentLimit(self, value: Union[str, float]) -> None: ...
    def GetVolumeFractionLimit(self) -> float: ...
    def SetVolumeFractionLimit(self, value: Union[str, float]) -> None: ...
    def GetRestitutionModel(self) -> str: ...
    def SetRestitutionModel(self, value: str) -> None: ...
    def GetValidRestitutionModelValues(self) -> List[str]: ...
    def GetSearchDistanceMultiplier(self) -> float: ...
    def SetSearchDistanceMultiplier(self, value: Union[str, float]) -> None: ...
    def GetSphThermalTransferModel(self) -> str: ...
    def SetSphThermalTransferModel(self, value: str) -> None: ...
    def GetValidSphThermalTransferModelValues(self) -> List[str]: ...
    def GetNumericalSofteningFactor(self) -> float: ...
    def SetNumericalSofteningFactor(self, value: Union[str, float]) -> None: ...
    def GetTangentialForceModel(self) -> str: ...
    def SetTangentialForceModel(self, value: str) -> None: ...
    def GetValidTangentialForceModelValues(self) -> List[str]: ...
    def GetThermalCorrectionModel(self) -> str: ...
    def SetThermalCorrectionModel(self, value: str) -> None: ...
    def GetValidThermalCorrectionModelValues(self) -> List[str]: ...
    def GetUpdateDistanceMultiplier(self) -> float: ...
    def SetUpdateDistanceMultiplier(self, value: Union[str, float]) -> None: ...
    def GetUseRadlEtAl(self) -> bool: ...
    def SetUseRadlEtAl(self, value: bool) -> None: ...
