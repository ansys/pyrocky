from pathlib import Path
from rocky30.models.point_cloud.point_cloud import PointCloud as PointCloud
from ansys.rocky.core._api_stubs.rocky30.plugins.api.motion._with_movement_mixin import _WithMovementMixin
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins import ElementWithAddins as ElementWithAddins
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_api import RockyApiError as RockyApiError
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_grid_process_element import RAGridProcessElementItem as RAGridProcessElementItem
from typing import Optional, Union

class RAPointCloud(RAGridProcessElementItem, ElementWithAddins, _WithMovementMixin):
    @classmethod
    def GetWrappedClass(self) -> type[PointCloud]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetFilePath(self) -> str: ...
    def SetFilePath(self, file_path: Union[str, Path]) -> None: ...
    def IsTransient(self) -> bool: ...
    def GetEnablePeriodic(self) -> bool: ...
    def SetEnablePeriodic(self, value: bool) -> None: ...
    def EnablePeriodic(self) -> None: ...
    def DisablePeriodic(self) -> None: ...
    def IsPeriodicEnabled(self) -> bool: ...
    def GetPeriodicStartTime(self, unit: Optional[str] = ...) -> float: ...
    def SetPeriodicStartTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetPeriodicStopTime(self, unit: Optional[str] = ...) -> float: ...
    def SetPeriodicStopTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSearchCutOff(self) -> bool: ...
    def SetSearchCutOff(self, value: bool) -> None: ...
