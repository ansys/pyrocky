from collections.abc import Sequence
from rocky30.base_types import Tuple3F as Tuple3F
from rocky30.models.regions_of_interest.roi_cylinder import RoiCylinder as RoiCylinder
from ansys.rocky.core._api_stubs.rocky30.plugins.api._ra_orientation_mixin import _RAOrientationMixin
from ansys.rocky.core._api_stubs.rocky30.plugins.api.motion._with_movement_mixin import _WithMovementMixin
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_grid_process_element import RAGridProcessElementItem as RAGridProcessElementItem
from typing import List, Optional, Union

class RARegionOfInterestCylinder(RAGridProcessElementItem, _WithMovementMixin, _RAOrientationMixin):
    @classmethod
    def GetWrappedClass(cls) -> type: ...
    @classmethod
    def GetClassName(cls) -> str: ...
    def GetCenterAfterMovement(self, timestep: int) -> Tuple3F: ...
    def GetCenter(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetCenter(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetFinalAngle(self, unit: Optional[str] = ...) -> float: ...
    def SetFinalAngle(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetHeight(self, unit: Optional[str] = ...) -> float: ...
    def SetHeight(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetInitialAngle(self, unit: Optional[str] = ...) -> float: ...
    def SetInitialAngle(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetInternalFactor(self, unit: Optional[str] = ...) -> float: ...
    def SetInternalFactor(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetRadius(self, unit: Optional[str] = ...) -> float: ...
    def SetRadius(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
