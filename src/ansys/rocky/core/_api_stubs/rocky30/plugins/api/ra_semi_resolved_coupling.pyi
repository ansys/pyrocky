from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_api import RockyApiError as RockyApiError
from rocky30coupling.fluent.io.fluent_cas_description import FluentCaseConfig as FluentCaseConfig
from typing import List, Optional, Union

class RAFluentSemiResolvedCoupling(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def SetPartIdIfValid(self) -> None: ...
    def SetupDatFilename(self, dat_filename: str) -> bool: ...
    def SetupStoreFiles(self, cas_filename: str, case_config: Optional['FluentCaseConfig'] = ...) -> None: ...
    def GetFluentReleases(self) -> list[str]: ...
    def GetFluentVersion(self) -> str: ...
    def SetFluentVersion(self, fluent_version: str) -> str: ...
    def GetCouplingFilesKept(self) -> int: ...
    def SetCouplingFilesKept(self, value: Union[str, int]) -> None: ...
    def GetFluentAdditionalArgs(self) -> str: ...
    def SetFluentAdditionalArgs(self, value: str) -> None: ...
    def GetFluentExecutionMode(self) -> str: ...
    def SetFluentExecutionMode(self, value: str) -> None: ...
    def GetValidFluentExecutionModeValues(self) -> List[str]: ...
    def GetFluentOutputFrequencyMultiplier(self) -> int: ...
    def SetFluentOutputFrequencyMultiplier(self, value: Union[str, int]) -> None: ...
    def GetFluentSolverProcesses(self) -> int: ...
    def SetFluentSolverProcesses(self, value: Union[str, int]) -> None: ...
    def GetUseDatInitialization(self) -> bool: ...
    def SetUseDatInitialization(self, value: bool) -> None: ...
