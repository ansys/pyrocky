# Copyright (C) 2023 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from typing import List, Optional, Union

from rocky30coupling.fluent.io.fluent_cas_description import (
    FluentCaseConfig as FluentCaseConfig,
)

from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import (
    ApiElementItem,
)

class RAFluentSemiResolvedCoupling(ApiElementItem):
    @classmethod
    def GetWrappedClass(self) -> type: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def SetPartIdIfValid(self) -> None: ...
    def SetupDatFilename(self, dat_filename: str) -> bool: ...
    def SetupStoreFiles(
        self, cas_filename: str, case_config: Optional["FluentCaseConfig"] = ...
    ) -> None: ...
    def GetFluentReleases(self) -> list[str]: ...
    def GetFluentVersion(self) -> str: ...
    def SetFluentVersion(self, fluent_version: str) -> None: ...
    def GetCouplingFilesKept(self) -> int: ...
    def SetCouplingFilesKept(self, value: Union[str, int]) -> None: ...
    def GetFluentAdditionalArgs(self) -> str: ...
    def SetFluentAdditionalArgs(self, value: str) -> None: ...
    def GetFluentExecutionMode(self) -> str: ...
    def SetFluentExecutionMode(self, value: str) -> None: ...
    def GetValidFluentExecutionModeValues(self) -> List[str]: ...
    def GetFluentOutputFrequencyMultiplier(self) -> int: ...
    def SetFluentOutputFrequencyMultiplier(self, value: Union[str, int]) -> None: ...
    def GetFluentSolverProcesses(self) -> int: ...
    def SetFluentSolverProcesses(self, value: Union[str, int]) -> None: ...
    def GetUseDatInitialization(self) -> bool: ...
    def SetUseDatInitialization(self, value: bool) -> None: ...
