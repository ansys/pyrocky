from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins import ElementWithAddins as ElementWithAddins
from typing import Optional, Union

class RASolidMaterial(ApiElementItem, ElementWithAddins):
    @classmethod
    def GetWrappedClass(self): ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetUseBulkDensity(self) -> bool: ...
    def SetUseBulkDensity(self, value: bool) -> None: ...
    def GetBulkDensity(self, unit: Optional[str] = ...) -> float: ...
    def SetBulkDensity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetBulkSolidFraction(self) -> float: ...
    def SetBulkSolidFraction(self, value: Union[str, float]) -> None: ...
    def GetCurrentDensity(self, unit: Optional[str] = ...) -> float: ...
    def SetCurrentDensity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetDensity(self, unit: Optional[str] = ...) -> float: ...
    def SetDensity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetYoungsModulus(self, unit: Optional[str] = ...) -> float: ...
    def SetYoungsModulus(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetPoissonRatio(self, unit: Optional[str] = ...) -> float: ...
    def SetPoissonRatio(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSpecificHeat(self, unit: Optional[str] = ...) -> float: ...
    def SetSpecificHeat(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetThermalConductivity(self, unit: Optional[str] = ...) -> float: ...
    def SetThermalConductivity(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
