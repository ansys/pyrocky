from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_api import RockyApiError as RockyApiError
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_circular_surface import RACircularSurface as RACircularSurface
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_process_element import RASurfaceUserProcess as RASurfaceUserProcess, RAUserProcess as RAUserProcess
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_rectangular_surface import RARectangularSurface as RARectangularSurface
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_surface import RASurface as RASurface
from rocky30.plugins.sph.streamlines_user_process.streamlines_user_process import StreamlinesUserProcessSubject as StreamlinesUserProcessSubject
from typing import List, Optional, Union

SurfaceTypes = Union[RASurface, RASurfaceUserProcess, RARectangularSurface, RACircularSurface]

class RAStreamlinesUserProcess(RAUserProcess):
    @classmethod
    def GetWrappedClass(cls) -> type[StreamlinesUserProcessSubject]: ...
    @classmethod
    def GetClassName(cls) -> str: ...
    def UpdateStreamlines(self) -> None: ...
    def GetSources(self) -> Union[list[SurfaceTypes], None]: ...
    def SetSources(self, surfaces: Union[str, SurfaceTypes, list]) -> None: ...
    def GetAvailableSources(self) -> list[SurfaceTypes]: ...
    def GetDirection(self) -> str: ...
    def SetDirection(self, value: str) -> None: ...
    def GetValidDirectionValues(self) -> List[str]: ...
    def GetMaximumLength(self, unit: Optional[str] = ...) -> float: ...
    def SetMaximumLength(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetSpacing(self, unit: Optional[str] = ...) -> float: ...
    def SetSpacing(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
