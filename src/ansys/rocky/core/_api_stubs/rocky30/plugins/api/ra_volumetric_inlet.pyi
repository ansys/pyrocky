from collections.abc import Sequence
from ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item import ApiElementItem
from rocky30.models.input.volume_fill import VolumeFill as VolumeFill
from ansys.rocky.core._api_stubs.rocky30.plugins.api._ra_orientation_mixin import _RAOrientationMixin
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_volumetric_inlet_properties import RAVolumetricInletPropertiesList as RAVolumetricInletPropertiesList
from ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall import RAWall as RAWall
from ansys.rocky.core._api_stubs.rocky30.plugins.api.rocky_api_deprecated_decorator import ApiDeprecated as ApiDeprecated
from typing import List, Optional, Union

class RAVolumetricInlet(ApiElementItem, _RAOrientationMixin):
    @classmethod
    def GetWrappedClass(self) -> type[VolumeFill]: ...
    @classmethod
    def GetClassName(self) -> str: ...
    def GetInputPropertiesList(self) -> RAVolumetricInletPropertiesList: ...
    def GetCustomGeometries(self) -> list[RAWall]: ...
    def SetCustomGeometries(self, values: list[Union[str, RAWall]]) -> None: ...
    def GetUseCustomGeometriesToCompute(self) -> bool: ...
    def SetUseCustomGeometriesToCompute(self, value: bool) -> None: ...
    def GetBoxCenter(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetBoxCenter(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetBoxDimensions(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetBoxDimensions(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetUseGeometriesToCompute(self) -> bool: ...
    def SetUseGeometriesToCompute(self, value: bool) -> None: ...
    def GetGapScaleFactor(self) -> float: ...
    def SetGapScaleFactor(self, value: Union[str, float]) -> None: ...
    def GetInitialVelocity(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetInitialVelocity(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetPeriodic(self) -> bool: ...
    def SetPeriodic(self, value: bool) -> None: ...
    def EnablePeriodic(self) -> None: ...
    def DisablePeriodic(self) -> None: ...
    def IsPeriodicEnabled(self) -> bool: ...
    def GetName(self) -> str: ...
    def SetName(self, value: str) -> None: ...
    def GetPeriod(self, unit: Optional[str] = ...) -> float: ...
    def SetPeriod(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSeedCoordinates(self, unit: Optional[str] = ...) -> List[float]: ...
    def SetSeedCoordinates(self, values: Sequence[Union[str, float]], unit: Optional[str] = ...) -> None: ...
    def GetInjectionTime(self, unit: Optional[str] = ...) -> float: ...
    def SetInjectionTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetStopTime(self, unit: Optional[str] = ...) -> float: ...
    def SetStopTime(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSphMass(self, unit: Optional[str] = ...) -> float: ...
    def SetSphMass(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetSphTemperature(self, unit: Optional[str] = ...) -> float: ...
    def SetSphTemperature(self, value: Union[str, float], unit: Optional[str] = ...) -> None: ...
    def GetGeometries(self): ...
    def SetGeometries(self, values) -> None: ...
    def GetAvailableGeometries(self): ...
