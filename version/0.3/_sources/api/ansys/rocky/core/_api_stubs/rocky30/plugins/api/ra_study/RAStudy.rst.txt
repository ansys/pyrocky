.. py:class:: RAStudy(id: str, model_id: Optional[str] = ...)


   Bases: :py:obj:`ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem`

   .. py:attribute:: customer_name
      :type: _typeshed.Incomplete

      

   .. py:attribute:: description
      :type: _typeshed.Incomplete

      

   .. py:attribute:: STATUS_ERROR
      :type: str

      

   .. py:attribute:: STATUS_WARNING
      :type: str

      

   .. py:attribute:: STATUS_INFO
      :type: str

      

   .. py:attribute:: STATUS_UNKNOWN
      :type: str

      

   .. py:method:: GetWrappedClass() -> type[rocky30.models.study.study.Study]
      :classmethod:


   .. py:method:: GetCustomerName() -> str


   .. py:method:: SetCustomerName(customer_name: str) -> None


   .. py:method:: GetDescription() -> str


   .. py:method:: SetDescription(description: str) -> None


   .. py:method:: GetElementNames(type_name: Union[str, None] = ...) -> list[str]


   .. py:method:: GetElement(element_name: Union[str, None] = ..., type_name: Union[str, None] = ..., raise_if_no_found: bool = ...) -> ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem


   .. py:method:: GetSubjectElement(subject: Union[coilib50.subject.Subject, str]) -> ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem


   .. py:method:: GetExportToolkit() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_export_toolkit.RAExportToolkit


   .. py:method:: GetClassName() -> str
      :classmethod:


   .. py:method:: GetPhysics() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_physics.RAPhysics


   .. py:method:: GetMotionFrameSource() -> Union[ansys.rocky.core._api_stubs.rocky30.plugins.api.motion.ra_motion_frame_source.RAMotionFrameSource, None]


   .. py:method:: GetDomainSettings() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_domain_settings.RADomainSettings


   .. py:method:: GetSphSettings() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_sph_settings.RASPHSettings


   .. py:method:: GetSphEulerianSolution() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_sph_eulerian_solution.RASPHEulerianSolution


   .. py:method:: GetGeometryCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_geometry_collection.RAGeometryCollection


   .. py:method:: GetGeometry(geometry_name: str) -> Union[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall, None]


   .. py:method:: CreateParticle() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle.RAParticle


   .. py:method:: CreateParticleInput(entry_point, particle) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_inlet.RAParticleInlet


   .. py:method:: CreateContinuousInjection(entry_point: Union[ansys.rocky.core._api_stubs.rocky30.plugins.api.conveyors.ra_feed_conveyor.RAFeedConveyor, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_inlet.RAInletGeometry], particle: ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle.RAParticle) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_inlet.RAParticleInlet


   .. py:method:: CreateParticleInlet(entry_point: Union[ansys.rocky.core._api_stubs.rocky30.plugins.api.conveyors.ra_feed_conveyor.RAFeedConveyor, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_inlet.RAInletGeometry, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_surface.RASurface], particle: ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle.RAParticle) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_inlet.RAParticleInlet


   .. py:method:: CreateOutlet(exit_point: ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_base_geometry.RABaseGeometry) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_outlet.RAOutlet


   .. py:method:: CreateVolumeFill(particle: Particle = ..., name: Union[str, None] = ..., mass: float = ..., seed_coordinates: Union[rocky30.base_types.Tuple3F, None] = ..., geometries: Union[list[Union[str, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]], None] = ..., use_geometries_to_compute: bool = ..., box_center: Union[rocky30.base_types.Tuple3F, None] = ..., box_dimensions: Union[rocky30.base_types.Tuple3F, None] = ...) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_volumetric_inlet.RAVolumetricInlet


   .. py:method:: CreateVolumetricInlet(particle: Particle = ..., name: Union[str, None] = ..., mass: float = ..., seed_coordinates: Union[rocky30.base_types.Tuple3F, None] = ..., geometries: Union[list[Union[str, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]], None] = ..., use_geometries_to_compute: bool = ..., box_center: Union[rocky30.base_types.Tuple3F, None] = ..., box_dimensions: Union[rocky30.base_types.Tuple3F, None] = ...) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_volumetric_inlet.RAVolumetricInlet


   .. py:method:: CreateInlet() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_inlet.RAInletGeometry


   .. py:method:: CreateRectangularSurface()


   .. py:method:: CreateCircularSurface()


   .. py:method:: CreateFeedConveyor() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.conveyors.ra_feed_conveyor.RAFeedConveyor


   .. py:method:: CreateReceivingConveyor() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.conveyors.ra_receiving_conveyor.RAReceivingConveyor


   .. py:method:: ImportCustomGeometries(*args: Any, **kwargs: Any) -> Any


   .. py:method:: ImportGeometries(custom_filename: str, import_scale: float = ..., convert_yz: bool = ..., custom_name_prefix: Union[str, None] = ...) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]


   .. py:method:: ImportWall(custom_filename: str, import_scale: float = ..., convert_yz: bool = ..., custom_name_prefix: Union[str, None] = ...) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]


   .. py:method:: ImportSystemCouplingWall(custom_filename: str, import_scale: float = ..., convert_yz: bool = ..., custom_name_prefix: Union[str, None] = ...) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_system_coupling_wall.RASystemCouplingWall]


   .. py:method:: ImportSurface(custom_filename: str, import_scale: float = ..., convert_yz: bool = ..., custom_name_prefix: Union[str, None] = ...) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_surface.RASurface]


   .. py:method:: ConvertToWall(geometries: list[Union[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_surface.RASurface, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_system_coupling_wall.RASystemCouplingWall]]) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]


   .. py:method:: ConvertToSystemCouplingWall(geometries: list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_system_coupling_wall.RASystemCouplingWall]


   .. py:method:: ConvertToSurface(geometries: list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall]) -> list[ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_surface.RASurface]


   .. py:method:: GetCustomGeometriesFromFilename(*args: Any, **kwargs: Any) -> Any


   .. py:method:: GetGeometriesFromFilename(new_filename: str) -> list[ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem]


   .. py:method:: GetWallFromFilename(filename: str) -> list[ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem]


   .. py:method:: GetSurfaceFromFilename(filename: str) -> list[ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem]


   .. py:method:: ReplaceCustomGeometryTriangles(*args: Any, **kwargs: Any) -> Any


   .. py:method:: ReplaceGeometryTriangles(new_filename: str, import_scale: float = ..., convert_yz: bool = ...) -> None


   .. py:method:: ReplaceWallTriangles(new_filename: str, import_scale: float = ..., convert_yz: bool = ...) -> None


   .. py:method:: RemoveCustomGeometries(*args: Any, **kwargs: Any) -> Any


   .. py:method:: RemoveGeometries(filename: str) -> None


   .. py:method:: RemoveWall(filename: str) -> None


   .. py:method:: RemoveSurface(filename: str) -> None


   .. py:method:: GetRegionsOfInterestCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_regions_of_interest_collection.RARegionsOfInterestCollection


   .. py:method:: GetMaterialCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_materials_collection.RAMaterialCollection


   .. py:method:: GetParticleCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_collection.RAParticleCollection


   .. py:method:: GetPointCloudCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_point_cloud_collection.RAPointCloudCollection


   .. py:method:: GetMaterialsInteractionCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_materials_interaction_collection.RAMaterialsInteractionCollection


   .. py:method:: GetParticleInputCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_inlets_outlets_collection.RAInletsOutletsCollection


   .. py:method:: GetInletsOutletsCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_inlets_outlets_collection.RAInletsOutletsCollection


   .. py:method:: GetParticlesCalculations() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_calculations.RACalculations


   .. py:method:: GetCalculations() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_calculations.RACalculations


   .. py:method:: GetParticleInput(input_name: str) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_inlet.RAParticleInlet


   .. py:method:: GetSourceForMeshProcesses() -> coilib50.process.IProcess


   .. py:method:: GetInputReader() -> petroapp10.plugins.entities.input_reader.input_reader_model.InputReader


   .. py:method:: GetSolutionId() -> str


   .. py:method:: GetCFDCoupling() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_cfd_coupling.RACFDCoupling


   .. py:method:: GetAirFlow() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_airflow.RAAirFlow


   .. py:method:: GetContactData() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_contact_data.RAContactData


   .. py:method:: GetJointsData() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particle_joints_data.RAParticleJointsData


   .. py:method:: GetUnusedPartId() -> int


   .. py:method:: UpdateTimeSet() -> None


   .. py:method:: GetParticleMeshProcess() -> rocky30.process.particle.particle_mesh_process.ParticleMeshProcess


   .. py:method:: GetParticles() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_particles_process.RAParticles


   .. py:method:: SetRestartSubject(restart_subject: rocky30.models.restart.simulation_restart_subject.SimulationRestartSubject) -> None


   .. py:method:: GetRestartSubject() -> rocky30.models.restart.simulation_restart_subject.SimulationRestartSubject


   .. py:method:: GetSimulatorRun() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_simulator_run.RASimulatorRun


   .. py:method:: GetSolver() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_simulator_run.RASimulatorRun


   .. py:method:: CreateMaterialAndRelatedInteractions(material_name: Union[str, None] = ...)


   .. py:method:: CreateSolidMaterialAndRelatedInteractions(material_name: Union[str, None] = ...)


   .. py:method:: RemoveMaterialAndRelatedInteractions(material_or_name: RAMaterialOrName) -> None


   .. py:method:: RemoveSolidMaterialAndRelatedInteractions(material_or_name: RAMaterialOrName) -> None


   .. py:method:: CreateFluidMaterial(material_name: Union[str, None] = ...) -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_fluid_material.RAFluidMaterial


   .. py:method:: RemoveFluidMaterial(material_or_name: Union[str, ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_fluid_material.RAFluidMaterial]) -> None


   .. py:method:: GetElementCurve(element_name: str, curve_name: str, simulation_name: Union[str, None] = ..., realization: Union[str, None] = ...) -> sci20.plugins.api.api_curve.SciApiCurve


   .. py:method:: ClearPartIds() -> None


   .. py:method:: ResetSimulationStatus() -> None


   .. py:method:: SetupRestartPartIds() -> None


   .. py:method:: CreateRestartSubject(timestep_index: int, restart_filename: str) -> rocky20.simulator.RestartData


   .. py:method:: IsSimulating() -> bool


   .. py:method:: GetProgress() -> Union[float, None]


   .. py:method:: HasResults() -> bool


   .. py:method:: CanResumeSimulation() -> bool


   .. py:method:: DeleteResults()


   .. py:method:: RefreshResults()


   .. py:method:: StartSimulation(skip_summary: Union[bool, None] = ..., delete_results: Union[bool, None] = ..., non_blocking: bool = ...) -> bool


   .. py:method:: StopSimulation()


   .. py:method:: ExtendSimulation(extension_amount: Union[float, barril.units.Scalar] = ..., time: Union[int, coilib50.time.time_step.TimeStep, None] = ..., inlet_extensions: Union[ParticleInletExtensions, None] = ..., periodic_motion_extensions: Union[PeriodicMotionExtensions, None] = ...) -> None


   .. py:method:: GetTimeSet() -> coilib50.time.time_set.TimeSet


   .. py:method:: SetVariable(name: str, value: float) -> None


   .. py:method:: GetStatus(include_opengl_messages: bool = ...) -> Status
      :classmethod:


   .. py:method:: SetWorkbenchData(workbench_data: rocky30.models.workbench.workbench_data_subject.WorkbenchData) -> None


   .. py:method:: GetWorkbenchData() -> rocky30.models.workbench.workbench_data_subject.WorkbenchData


   .. py:method:: GetFEMForcesAnalysisModules(module_collection: ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins.RAModuleCollection) -> dict[str, str]


   .. py:method:: SetCollectForcesForFemAnalysis(value: bool) -> None


   .. py:method:: GetCollectForcesForFemAnalysis() -> bool


   .. py:method:: HasCalculatedHTC() -> bool


   .. py:method:: GetModuleCollection() -> ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins.RAModuleCollection


   .. py:method:: SetIntraParticleCollisionStatistics(value: bool) -> None


   .. py:method:: SetHTCCalculatorEnabled(value: bool) -> None


   .. py:method:: GetIntraParticleCollisionStatistics() -> bool


   .. py:method:: SetMeshedParticlesUpscalingEnabled(value: bool) -> None


   .. py:method:: GetMeshedParticlesUpscalingEnabled() -> bool


