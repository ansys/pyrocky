:py:mod:`ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall`
=================================================================

.. py:module:: ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_wall.RAWall




.. py:class:: RAWall


   Bases: :py:obj:`ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_base_geometry.RABaseGeometry`, :py:obj:`ansys.rocky.core._api_stubs.rocky30.plugins.api.ra_addins.ElementWithAddins`

   .. py:method:: GetWrappedClass()
      :classmethod:


   .. py:method:: GetClassName() -> str
      :classmethod:


   .. py:method:: LoadFile(file_path: str, import_scale: float = ..., convert_yz: bool = ...) -> None


   .. py:method:: GetUseWear() -> bool


   .. py:method:: SetUseWear(value: bool) -> None


   .. py:method:: HasMotionFrame() -> bool


   .. py:method:: GetHorizontalOffset(unit: Union[str, None] = ...) -> float


   .. py:method:: SetHorizontalOffset(value: Union[str, float], unit: Union[str, None] = ...) -> None


   .. py:method:: GetVerticalOffset(unit: Union[str, None] = ...) -> float


   .. py:method:: SetVerticalOffset(value: Union[str, float], unit: Union[str, None] = ...) -> None


   .. py:method:: GetOutOfPlaneOffset(unit: Union[str, None] = ...) -> float


   .. py:method:: SetOutOfPlaneOffset(value: Union[str, float], unit: Union[str, None] = ...) -> None


   .. py:method:: GetOrientation(unit: str = ...) -> rocky30.base_types.Tuple3F


   .. py:method:: SetOrientation(rotation: rocky30.base_types.Tuple3F, unit: str = ...) -> None


   .. py:method:: SetOrientationFromAngles(rotation: rocky30.base_types.Tuple3F, unit: str = ..., local_angles: bool = ..., order: str = ...) -> None


   .. py:method:: SetOrientationFromAngleAndVector(angle: float, vector: rocky30.base_types.Tuple3F, unit: str = ...) -> None


   .. py:method:: SetOrientationFromBasisVector(vector_x: rocky30.base_types.Tuple3F, vector_y: rocky30.base_types.Tuple3F, vector_z: rocky30.base_types.Tuple3F) -> None


   .. py:method:: GetOrientationFromAngles(unit: str = ...) -> rocky30.base_types.Tuple3F


   .. py:method:: GetOrientationFromAngleAndVector(unit: str = ...) -> tuple[float, rocky30.base_types.Tuple3F]


   .. py:method:: GetOrientationFromBasisVector() -> tuple[rocky30.base_types.Tuple3F, rocky30.base_types.Tuple3F, rocky30.base_types.Tuple3F]


   .. py:method:: GetDisableTime(unit: Optional[str] = ...) -> float


   .. py:method:: SetDisableTime(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetEnableTime(unit: Optional[str] = ...) -> float


   .. py:method:: SetEnableTime(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetPivotPoint(unit: Optional[str] = ...) -> List[float]


   .. py:method:: SetPivotPoint(values: collections.abc.Sequence[Union[str, float]], unit: Optional[str] = ...) -> None


   .. py:method:: GetTemperature(unit: Optional[str] = ...) -> float


   .. py:method:: SetTemperature(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetThermalBoundaryConditionType() -> str


   .. py:method:: SetThermalBoundaryConditionType(value: str) -> None


   .. py:method:: GetValidThermalBoundaryConditionTypeValues() -> List[str]


   .. py:method:: GetTranslation(unit: Optional[str] = ...) -> List[float]


   .. py:method:: SetTranslation(values: collections.abc.Sequence[Union[str, float]], unit: Optional[str] = ...) -> None


   .. py:method:: GetTriangleSize(unit: Optional[str] = ...) -> float


   .. py:method:: SetTriangleSize(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetBoundaryMass(unit: Optional[str] = ...) -> float


   .. py:method:: SetBoundaryMass(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetGravityCenter(unit: Optional[str] = ...) -> List[float]


   .. py:method:: SetGravityCenter(values: collections.abc.Sequence[Union[str, float]], unit: Optional[str] = ...) -> None


   .. py:method:: GetMomentXDirection() -> List[float]


   .. py:method:: SetMomentXDirection(values: List[Union[str, float]]) -> None


   .. py:method:: GetMomentYDirection() -> List[float]


   .. py:method:: SetMomentYDirection(values: List[Union[str, float]]) -> None


   .. py:method:: GetMomentZDirection() -> List[float]


   .. py:method:: SetMomentZDirection(values: List[Union[str, float]]) -> None


   .. py:method:: GetPrincipalMomentOfInertia(unit: Optional[str] = ...) -> List[float]


   .. py:method:: SetPrincipalMomentOfInertia(values: collections.abc.Sequence[Union[str, float]], unit: Optional[str] = ...) -> None


   .. py:method:: GetName() -> str


   .. py:method:: SetName(value: str) -> None


   .. py:method:: GetPeriodicReplication() -> bool


   .. py:method:: SetPeriodicReplication(value: bool) -> None


   .. py:method:: GetNumberOfReplications() -> int


   .. py:method:: SetNumberOfReplications(value: Union[str, int]) -> None


   .. py:method:: GetReplicateGeometry() -> bool


   .. py:method:: SetReplicateGeometry(value: bool) -> None


   .. py:method:: GetReplicateTime(unit: Optional[str] = ...) -> float


   .. py:method:: SetReplicateTime(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetSphBoundaryType() -> str


   .. py:method:: SetSphBoundaryType(value: str) -> None


   .. py:method:: GetValidSphBoundaryTypeValues() -> List[str]


   .. py:method:: GetSurfaceTensionContactAngle(unit: Optional[str] = ...) -> float


   .. py:method:: SetSurfaceTensionContactAngle(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetVolumeShearWorkRatio(unit: Optional[str] = ...) -> float


   .. py:method:: SetVolumeShearWorkRatio(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetWearModel() -> str


   .. py:method:: SetWearModel(value: str) -> None


   .. py:method:: GetValidWearModelValues() -> List[str]


   .. py:method:: GetMaterial()


   .. py:method:: SetMaterial(value) -> None


   .. py:method:: GetAvailableMaterials()



