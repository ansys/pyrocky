:py:mod:`ansys.rocky.core.launcher`
===================================

.. py:module:: ansys.rocky.core.launcher

.. autoapi-nested-parse::

   Module that exposes functions to launch a Rocky application session.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ansys.rocky.core.launcher.launch_rocky
   ansys.rocky.core.launcher.launch_freeflow



Attributes
~~~~~~~~~~

.. autoapisummary::

   ansys.rocky.core.launcher.MINIMUM_ANSYS_VERSION_SUPPORTED
   ansys.rocky.core.launcher.COMPANY


.. py:data:: MINIMUM_ANSYS_VERSION_SUPPORTED
   :value: 242

   

.. py:data:: COMPANY
   :value: 'Ansys'

   

.. py:function:: launch_rocky(rocky_exe: pathlib.Path | str | None = None, rocky_version: int | None = None, *, headless: bool = True, server_port: int = _PYROCKY_DEFAULT_PORT, close_existing: bool = False) -> ansys.rocky.core.client.RockyClient

   
   Launch the Rocky executable with the PyRocky server enabled.

   This method waits for Rocky to start up and then returns a
   ```RockyClient`` instance.

   :Parameters:

       **rocky_exe:**
           Path to the Rocky executable.

       **rocky_version:**
           Rocky version to run. If no executable is passed and the version is not
           specified, this method tries to find the path using the latest Ansys path
           returned by ansys-tools-path API.

       **headless:**
           Whether to launch Rocky in headless mode. The default is ``True``.

       **server_port:**
           Set the port for Rocky RPC server.

       **close_existing:**
           Checks if a session exists under the given server_port and closes it
           before attempting to launch a new session.



   :Returns:

       :obj:`RockyClient`
           Rocky client instance connected to the launched Rocky app.











   ..
       !! processed by numpydoc !!

.. py:function:: launch_freeflow(freeflow_exe: pathlib.Path | str | None = None, freeflow_version: int | None = None, *, headless: bool = True, server_port: int = _PYROCKY_DEFAULT_PORT, close_existing: bool = False) -> ansys.rocky.core.client.RockyClient

   
   Launch the FreeFlow executable with the PyRocky server enabled.

   This method waits for Rocky to start up and then returns a
   ```RockyClient`` instance.

   :Parameters:

       **freeflow_exe:**
           Path to the Freeflow executable.

       **freeflow_version:**
           Freeflow version to run. If no executable is passed and the version is not
           specified, this method tries to find the path using the latest Ansys path
           returned by ansys-tools-path API.

       **headless:**
           Whether to launch Freeflow in headless mode. The default is ``True``.

       **server_port:**
           Set the port for Rocky RPC server.

       **close_existing:**
           Checks if a session exists under the given server_port and closes it
           before attempting to launch a new session.



   :Returns:

       :obj:`RockyClient`
           Rocky client instance connected to the launched Rocky/Freeflow app.











   ..
       !! processed by numpydoc !!

