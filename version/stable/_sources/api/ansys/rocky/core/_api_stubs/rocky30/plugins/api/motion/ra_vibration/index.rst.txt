:py:mod:`ansys.rocky.core._api_stubs.rocky30.plugins.api.motion.ra_vibration`
=============================================================================

.. py:module:: ansys.rocky.core._api_stubs.rocky30.plugins.api.motion.ra_vibration


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ansys.rocky.core._api_stubs.rocky30.plugins.api.motion.ra_vibration.RAVibration




.. py:class:: RAVibration(id: str, model_id: Optional[str] = ...)


   Bases: :py:obj:`ansys.rocky.core._api_stubs.plugins10.plugins.api.api_element_item.ApiElementItem`

   .. py:method:: GetWrappedClass()
      :classmethod:


   .. py:method:: GetClassName()
      :classmethod:


   .. py:method:: GetAmplitudeVariation(unit: Optional[str] = ...) -> float


   .. py:method:: SetAmplitudeVariation(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetDirection() -> List[float]


   .. py:method:: SetDirection(values: List[Union[str, float]]) -> None


   .. py:method:: GetFrequencyVariation(unit: Optional[str] = ...) -> float


   .. py:method:: SetFrequencyVariation(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetInitialAmplitude(unit: Optional[str] = ...) -> float


   .. py:method:: SetInitialAmplitude(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetInitialFrequency(unit: Optional[str] = ...) -> float


   .. py:method:: SetInitialFrequency(value: Union[str, float], unit: Optional[str] = ...) -> None


   .. py:method:: GetInitialPhase(unit: Optional[str] = ...) -> float


   .. py:method:: SetInitialPhase(value: Union[str, float], unit: Optional[str] = ...) -> None



